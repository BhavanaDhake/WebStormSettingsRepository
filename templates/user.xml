<templateSet group="user">
  <template name="crc" value="import React, {Component} from 'react';&#10;import {StyleSheet, View} from 'react-native';&#10;import PropTypes from 'prop-types';&#10;import {NAV_BAR_HEIGHT} from '../../../theme/dimensions'&#10;import {WHITE} from '../../../theme/colors'&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    marginTop: NAV_BAR_HEIGHT,&#10;    backgroundColor: WHITE,&#10;    paddingTop: 10,&#10;  },&#10;});&#10;&#10;class $NAME$ extends Component {&#10;  static propTypes = {&#10;&#10;  }&#10;&#10;  state = {&#10;&#10;  }&#10;&#10;  render() {&#10;    return (&#10;      &lt;View style={styles.container}/&gt;&#10;    )&#10;  }&#10;}&#10;&#10;export default $NAME$;" description="Create react component" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="seqct" value="return queryInterface.createTable('$TABLE_NAME$', {&#10;    &#10;})" description="" toReformat="false" toShortenFQNames="true">
    <variable name="TABLE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="gp" value="const {$PROP$} = this.props;" description="Get prop from props" toReformat="false" toShortenFQNames="true">
    <variable name="PROP" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="gs" value="const {$VAR$} = this.state;" description="Get props from state" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ss" value="this.setState({&#10;  $VAR$: $VALUE$&#10;});" description="set state" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cc" value="import React from 'react';&#10;import PropTypes from 'prop-types';&#10;import {View, StyleSheet} from 'react-native';&#10;&#10;const styles = StyleSheet.create({&#10;  container: {},&#10;})&#10;&#10;const $NAME$ = ({}) =&gt; (&#10;  &lt;View style={styles.container}&gt;&#10;&#10;  &lt;/View&gt;&#10;)&#10;&#10;$NAME$.propTypes = {&#10;}&#10;&#10;export default $NAME$;" description="Create static react component" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cred" value="import {} from './actions';&#10;&#10;const initialState = {};&#10;&#10;const reducer = (state = initialState, action = {type: ''}) =&gt; {&#10;  switch (action.type) {&#10;    default:&#10;      return state;&#10;  }&#10;}&#10;&#10;export default reducer;" description="Create Redux reducer" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cact" value="export const $ACTION$ = '$ACTION$';&#10;&#10;const $ACTION_NAME$Action = ($PARAMS$) =&gt; ({&#10;  type: $ACTION$,&#10;  $PARAMS$&#10;})&#10;&#10;export const $ACTION_NAME$ = ($PARAMS$) =&gt; (dispatch) =&gt;&#10;  dispatch($ACTION_NAME$Action($PARAMS$))" description="Create Redux action with action creator" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="caact" value="export const $ACTION$_REQUEST = '$ACTION$_REQUEST';&#10;export const $ACTION$_SUCCESS = '$ACTION$_SUCCESS';&#10;export const $ACTION$_FAILED = '$ACTION$_FAILED';&#10;&#10;const $ACTION_NAME$Request = () =&gt; ({&#10;  type: $ACTION$_REQUEST&#10;})&#10;&#10;const $ACTION_NAME$Success = (data) =&gt; ({&#10;  type: $ACTION$_SUCCESS,&#10;  data&#10;})&#10;&#10;const $ACTION_NAME$Failed = (error) =&gt; ({&#10;  type: $ACTION$_FAILED,&#10;  error: error.toString()&#10;})&#10;&#10;export const $ACTION_NAME$ = () =&gt; (dispatch, getState) =&gt; {&#10;  dispatch($ACTION_NAME$Request())&#10;  return apiCall(getState().user.token)&#10;    .then(response =&gt; dispatch($ACTION_NAME$Success(response)))&#10;    .catch(error =&gt; dispatch($ACTION_NAME$Failed(error)))&#10;}" description="Create Asynchronous Redux action with action creator" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ed" value="export default $VARIABLE$;" description="export default" toReformat="false" toShortenFQNames="true">
    <variable name="VARIABLE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="afc" value="const $NAME$ = () =&gt; {&#10;  $END$&#10;}" description="constant arrow function" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cont" value="import {connect} from 'react-redux';&#10;import $COMPONENT$ from './ui/$COMPONENT$';&#10;&#10;const mapStateToProps = state =&gt; ({&#10;});&#10;&#10;const mapDispatchToProps = ({&#10;});&#10;&#10;export default connect(mapStateToProps, mapDispatchToProps)($COMPONENT$);&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="afa" value="() =&gt; {&#10;  $END$&#10;}" description="Anonymous arrow function" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cl" value="console.log($PARAM$);" description="console log" toReformat="false" toShortenFQNames="true">
    <variable name="PARAM" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cr" value="const $NAME$ = {&#10;  middleWare: Validator([]),&#10;  controller: &#10;}&#10;&#10;export default $NAME$;" description="create request" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="import" value="import $NAME$ from '$NAME$';" description="import a dependency" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cat" value="it('$NAME$', async () =&gt; {&#10;  // Given&#10;&#10;  // When&#10;&#10;  // Then&#10;})" description="Create asynchronous jest test" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ct" value="it('$NAME$', () =&gt; {&#10;  // Given&#10;&#10;  // When&#10;&#10;  // Then&#10;})" description="Create jest test" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cdbm" value="import DatabaseModel from './DatabaseModel'&#10;import type {$NAME$Model} from '../../database/models/$LOWERCASE_NAME$'&#10;&#10;class $NAME$ extends DatabaseModel implements $NAME$Model {&#10;    $END$&#10;}&#10;&#10;export default $NAME$;" description="Create a database model" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="User" alwaysStopAt="true" />
    <variable name="LOWERCASE_NAME" expression="" defaultValue="snakeCase($NAME$)" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cmc" value="const make$NAME$Call = async (requestBody) =&gt; {&#10;  const res = MockResponse.withStatusAndJson();&#10;  await resendEmailVerification.controller(MockRequest.for$NAME$(requestBody), res)&#10;  return res;&#10;}" description="Create make request call" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="scm" value="const $CONST$ = {&#10;  up: (queryInterface, Sequelize) =&gt; queryInterface.createTable('$TABLE_NAME$', {&#10;    id: {&#10;      allowNull: false,&#10;      autoIncrement: true,&#10;      primaryKey: true,&#10;      type: Sequelize.INTEGER,&#10;    },&#10;  }),&#10;  down: (queryInterface) =&gt; {&#10;    queryInterface.dropTable('$TABLE_NAME$')&#10;  },&#10;}&#10;&#10;export default $CONST$" shortcut="SPACE" description="Create sequelize migration" toReformat="true" toShortenFQNames="true">
    <variable name="CONST" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TABLE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="afs" value="const $NAME$ = () =&gt; &#10;  $END$" description="single line arrow function" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ctc" value="import React from 'react'&#10;&#10;const $NAME$ = () =&gt; (&#10;  $END$&#10;);&#10;&#10;export default $NAME$;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rsc" value="import React from 'react';&#10;import PropTypes from 'prop-types';&#10;&#10;const $NAME$ = ({}) =&gt; (&#10;  $END$&#10;);&#10;&#10;$NAME$.propTypes = {&#10;&#10;};&#10;&#10;export default $NAME$;" description="react static component" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>